saltstack - pillar
    a. pillar和grains不一样，是在服务端上定义的，并且是针对minion定义的一些信息，像一些比较重要的信息（密码）可以定义在pillar中，还可以定义变量等。
    b. 配置自定义pillar，在server端上编辑配置文件/etc/salt/master，找到如下几行，然后去掉前面的#，
        #pillar_roots:
        #  base:
        #    - /srv/pillar
    c. 创建一个新文件夹，并添加一个文件，内容见以下内容
        mkdir  /srv/pillar/
        cat /srv/pillar/test.sls
        conf: /etc/123.conf
    d. 创建文件/srv/pillar/top.sls，添加以下内容
        cat /srv/pillar/top.sls 
        base:
         'Client.Saltstack'"
           -test
    e. 重启master服务
        /etc/init.d/salt-master restart
    f. 刷新服务
        salt '*' saltutil.refresh_pillar
    g. 验证
        salt '*' pillar.item test
        也可以通过pillar作为salt的匹配对象，如 salt -I 'conf:/etc/123.conf' test.ping

目录结构：
[root@Server pillar]# tree
.
├── abc1.sls
├── abc.sls
├── test.sls
└── top.sls

文件内容：
# cat abc.sls 
system: centos6.7

# cat abc1.sls 
system: centos6.7
arch: i386

# cat test.sls 
conf: /etc/123.conf
myname: zw

# cat top.sls 
base:
  'Client.Saltstack':
      - test
      - abc
      - abc1

# salt -I arch:i386 cmd.run 'w'
Client.Saltstack:
    22:26:13 up  4:40,  1 user,  load average: 0.00, 0.00, 0.00
    USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
    root     pts/1    192.168.3.241    19:54    5:16   0.01s  0.01s -bash

如果需要添加多个client，那么top文件应该如何编写？
# cat top.sls 
base:
  'Client.Saltstack':
    - test
    - abc
    - abc1
  'Server.Saltstack':
    - test
    - abc
    - abc1

    测试：
    [root@Server pillar]# salt '*' saltutil.refresh_pillar
    Client.Saltstack:
    True
    Server.Saltstack:
    True
    [root@Server pillar]# salt '*' pillar.items
    Server.Saltstack:
        ----------
        arch:
            i386
        conf:
            /etc/123.conf
        myname:
            zw
        system:
            centos6.7
    Client.Saltstack:
        ----------
        arch:
            i386
        conf:
            /etc/123.conf
        myname:
            zw
        system:
            centos6.7
