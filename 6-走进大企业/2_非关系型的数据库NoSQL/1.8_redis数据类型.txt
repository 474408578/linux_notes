1. Redis数据类型－String
    string是最简单的类型，你可以理解成是memcached一样的类型，一个key对应一个value，其上支持的操作与memcached的操作类似，它的功能更丰富，可以存二进制的对象

    基本操作
    [root@MASTER redis-3.0.7]# redis-cli 
    127.0.0.1:6379> set key1 aminglinux
    OK
    127.0.0.1:6379> get key1
    "aminglinux"
    127.0.0.1:6379> mset key1 aming key2 hello key3 love key4 make
    OK
    127.0.0.1:6379> MGET
    (error) ERR wrong number of arguments for 'mget' command
    127.0.0.1:6379> MGET key1 key2 key3 key4
    1) "aming"
    2) "hello"
    3) "love"
    4) "make"
    127.0.0.1:6379> exit
    [root@MASTER redis-3.0.7]# redis-cli get key1
    "aming"
    [root@MASTER redis-3.0.7]# redis-cli mget key1 key2 key4
    1) "aming"
    2) "hello"
    3) "make"

2. Resit数据类型－List
    list是一个链表结构，主要功能是push、pop、获取一个范围所有值等等。 操作中key理解为链表的名字。
    使用list结构，我们可以轻松地实现最新消息排行等功能（比如新浪微博的timeline）
    list的另外一个应用语法是消息队列，可以利用list的push操作，将任务存在list中，然后工作线程再用pop操作将任务取出

    # 基本操作
    # list是有方向的，lpush表示把数据从左边推向list，rpop表示从右边取数据，类似的命令还是rpush、lpop
    [root@MASTER redis-3.0.7]# redis-cli 
    127.0.0.1:6379> lpush list 1
    (integer) 1
    127.0.0.1:6379> lpush list a
    (integer) 2
    127.0.0.1:6379> lpush list a\ b\ c
    (integer) 5
    127.0.0.1:6379> lpush list "234 abc"
    (integer) 6
    127.0.0.1:6379> rpop list
    "1"
    127.0.0.1:6379> lpop list
    "234 abc"
    127.0.0.1:6379> lpop list
    "c"
    127.0.0.1:6379> lpop list
    "b\\"
    127.0.0.1:6379> lpop list
    "a\\"
    127.0.0.1:6379> lpop list
    "a"
    127.0.0.1:6379> lpop list
    (nil)
    127.0.0.1:6379> rpop
    (error) ERR wrong number of arguments for 'rpop' command
    127.0.0.1:6379> rpush list 3
    (integer) 1
    127.0.0.1:6379> rpush list 4
    (integer) 2
    127.0.0.1:6379> rpush list 5
    (integer) 3
    127.0.0.1:6379> rpop list 
    "5"
    127.0.0.1:6379> rpop list 
    "4"
    127.0.0.1:6379> rpop list 
    "3"
    
    # lrange list_name
    127.0.0.1:6379> lpush list left l1 l2 l3 4 5 6 7 8 9 10 lend rightest
    (integer) 13
    127.0.0.1:6379> LRANGE left 0 -1
     1) "rightest"
     2) "lend"
     3) "10"
     4) "9"
     5) "8"
     6) "7"
     7) "6"
     8) "5"
     9) "4"
     10) "l3"
     11) "l2"
     12) "l1"
     127.0.0.1:6379> LRANGE list 0 -1
     1) "rightest"
     2) "lend"
     3) "10"
     4) "9"
     5) "8"
     6) "7"
     7) "6"
     8) "5"
     9) "4"
     10) "l3"
     11) "l2"
     12) "l1"
     13) "left"
     127.0.0.1:6379> LPOP list
     "rightest"
     127.0.0.1:6379> LRANGE list 0 -1
     1) "lend"
     2) "10"
     3) "9"
     4) "8"
     5) "7"
     6) "6"
     7) "5"
     8) "4"
     9) "l3"
     10) "l2"
     11) "l1"
     12) "left"
     127.0.0.1:6379> 

3. Redis数据类型－Set
    set就是集合，和我们数字中的集合概念类似，对集合的操作有添加、删除元素，对多个集合求交、并、差等，操作key可以理解为集合的名字。比如在微博应用中，可以将一个用户所有关注的人存在一个集合里面，将所有粉丝存在一个集合。
    因为redis非常人性化的为集合求交集、并集、送信｀差集等操作，那么就可以非常方便的实现如共同关心、共同喜好、二度好友等功能，对上面所有的集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存在一个新的集合中，qq有一个社交功能叫“好友标签”，大家可以给你的好友贴标签，比如“大美女”，“阳光”，“pretty”等等，这就可以使用redis的命令来实现，把每一个用户的标签都存在一个集合之中。
    # 基本操作
    127.0.0.1:6379> sadd set1 a
    (integer) 1
    127.0.0.1:6379> sadd set1 aming
    (integer) 1
    127.0.0.1:6379> sadd set1 aminglinux
    (integer) 1
    127.0.0.1:6379> sadd set1 aminglinux.com
    (integer) 1
    127.0.0.1:6379> smember set1
    (error) ERR unknown command 'smember'
    127.0.0.1:6379> smembers set1
    1) "aminglinux.com"
    2) "aminglinux"
    3) "aming"
    4) "a"

4. Redis数据类型－Sort set
    sort set是有序集合，它比set多一个权重参数score，使用集合中的元素能够按照score进行有序排列，比如一个存储全班同学成绩的sorted set，其集合value可以是全班同学的学号，而score就可以是同学的考试成绩，这样在数据插入集合的时候，就已经进行了天然的排序
    # 基本操作
    # 添加元素，且正向排序
    127.0.0.1:6379> ZADD set_sort 100 "xiao.ming"
    (integer) 1
    127.0.0.1:6379> ZADD set_sort 30 "James"
    (integer) 1
    127.0.0.1:6379> ZADD set_sort 33 "Bonds"
    (integer) 1
    127.0.0.1:6379> ZADD set_sort 33 "Nicklos.Cage"
    (integer) 1
    127.0.0.1:6379> ZADD set_sort 60 "Duchoveny"
    (integer) 1
    127.0.0.1:6379> ZADD set_sort 320 "Carly.Rae.jepson"
    (integer) 1
    127.0.0.1:6379> ZADD set_sort 120 "David"
    (integer) 1
    127.0.0.1:6379> ZRANGE set_sort 0 -1
    1) "James"
    2) "Bonds"
    3) "Nicklos.Cage"
    4) "Duchoveny"
    5) "xiao.ming"
    6) "David"
    7) "Carly.Rae.jepson"

    # 反向排序
    127.0.0.1:6379> ZREVRANGE set_sort 0 -1
    1) "Carly.Rae.jepson"
    2) "David"
    3) "xiao.ming"
    4) "Duchoveny"
    5) "Nicklos.Cage"
    6) "Bonds"
    7) "James"
    
5. Redis数据类型－hash
    在memcached中，我们经常将一些结构化的信息打包成hashmpa，在客户端序列化后存储为一个字符串信息的值（一般是json格式），比如用户的呢称、年龄、性别、积分等。
    # 基本操作
    127.0.0.1:6379> HSET hash name aming
    (integer) 1
    127.0.0.1:6379> HGET hash name
    "aming"
    127.0.0.1:6379> HSET hash age 30
    (integer) 1
    127.0.0.1:6379> HGET hash age
    "30"
    127.0.0.1:6379> HGETALL hash 
    1) "name"
    2) "aming"
    3) "age"
    4) "30"
    127.0.0.1:6379> HGET hash 30
    (nil)

