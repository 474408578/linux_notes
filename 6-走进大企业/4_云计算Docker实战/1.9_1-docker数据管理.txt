Docker数据管理
1、挂载本地的目录到docker容器里面
	//-v用来指定挂载的目录，':'前面的目录为宿主机的本地目录，‘:’后面的目录为docker容器里面的目录
	docker run -itd -v /tmp/:/mnt/tmp_mount centos /bin/bash
	docker exec -it 06fd71376bb5d3fe /bin/bash
	//这里/tmp/tmp_mount下的文件和宿主机和/tmp目录下的文件是一致的。
	ls /mnt/tmp_mount
	mylog.txt  passwd  yum.log  yum.log.bak

2、挂载数据卷
	我们挂载目录的时候，可以指定容器的name，如果不指定，系统就随机定义了，比如前面没有指定name，它就随便生成一个名为的名字，关于name可以通过docker ps查看，在最后一列
	//查看已经启动了的容器，可以看到容器06fd71376bb5的name为distracted_hodgkin
	docker ps
	CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES
	b984be39e34e        centos              "/bin/bash"         14 seconds ago      Up 13 seconds                                stoic_stallman       
	06fd71376bb5        centos              "/bin/bash"         6 minutes ago       Up 6 minutes                                 distracted_hodgkin   
	03c52a39c1ce        registry            "docker-registry"   22 minutes ago      Up 22 minutes       0.0.0.0:5000->5000/tcp   goofy_banach     

	// mounted_volume为容器的数据卷，也就是说我们再启动一个新的容器的时候可以使用name为distracted_hodgkin容器已经挂载了的数据卷，即/mnt/tmp_mount目录
	docker run -itd --volumes-from distracted_hodgkin  centos  /bin/bash

	//在开启容器的时候指定容器的名字
	docker run -itd --name=busybox busybox /bin/sh

3、定义数据卷容器
	有时候，我们需要多个容器之间相互共享数据，类似于linux中的nfs，所以就可以找寻一个专门的数据卷容器，然后其它的容器可以直接挂载该数据
	a）首先建立数据卷容器
	docker run -itd -v /data_share --name vol_share_master centos /bin/bash
	f05ab72b33b737d4696715263f4be7173c33634ac84f5b4ed582d0c5f8f9c4f2

	docker ps
	CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
	f05ab72b33b7        centos              "/bin/bash"         2 seconds ago       Up 1 seconds 

	b）然后让其它的容器挂载该镜像
	# docker exec -it f0 bash
	# pwd
	/
	# ls  
	anaconda-post.log  bin  data_share  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
	# ifconfig &> /data_share/ifconfig.cmd
	# cat !$
	# cat /data_share/ifconfig.cmd
	bash: ifconfig: command not found

	# exit
	# docker ps
	CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES
	7f1d6ff96bf1        busybox             "/bin/sh"           56 seconds ago       Up 55 seconds                           determined_lumiere   
	f05ab72b33b7        centos              "/bin/bash"         About a minute ago   Up About a minute                       vol_share_master     
	# docker exec 7f /bin/sh
	# docker exec -it 7f /bin/sh
	# pwd
	/
	# ls
	bin         data_share  dev         etc         home        proc        root        sys         tmp         usr         var
	# cta data_share/ifconfig.cmd 
	/bin/sh: cta: not found


