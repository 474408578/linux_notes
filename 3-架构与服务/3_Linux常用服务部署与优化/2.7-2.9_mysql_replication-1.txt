1. Replication
	A --> change data --> bin_log --> transfer --> B --> replication_log --> change data

2. 配置从服务器
    cp -r /usr/local/mysql /usr/local/mysql_slave
    cp /etc/my.cnf .
    #修改端口,socket文件，数据库位置
    port    = 3307
    socket  = /tmp/mysql_slave.sock
    datadir = /data/mysql_slave
    #初始化数据库
    ./scripts/mysql_install_db --user=mysql --datadir=/data/mysql_slave

3. 编写启动脚本
    cp /etc/init.d/mysqld /etc/init.d/mysqld_slave

    basedir=/usr/local/mysql_slave
    datadir=/data/mysql_slave
    conf=$basedirmy.cnf

4. 测试从服务器是否可以正常启动
    /etc/init.d/mysqld_slave start

5. 配置主从，以下操作都是在主上面操作的
    mysql -S /tmp/mysql.sock        #登录主数据库
    #mysql -S /tmp/mysql_slave.sock  #登录从数据库
    mysqldump -S /tmp/mysql.sock --events mysql > mysql_master.sql #备份mysql数据库
    mv mysql_master.sql /root/mysql_dump/
    mysql -S /tmp/mysql.sock master < /root/mysql_dump/mysql_master.sql #把mysql数据库导入到master库里面

    #编辑主数据库的配置文件/etc/my.cnf
    server-id = 1               #这个数字可以是其它的，但是要保证主从的server-id不一样
    log-bin=mysql-bin           #mysql-bin这个名字也是可以自定义的
    binlog-ignore-db=mysql      #黑名单的方式，表示除了mysql，其它的数据库都做主从 
    binlog-do-db=master,db1,db2 #这个表示只针对主数据库中的master,db1,db2做主从
    
    #配置主从配置后，重启主数据库的服务
    /etc/init.d/mysqld restart

    #重启后可以看见主数据库下面生成一些文件,这些文件就是以log-bin定义的名字命名的
    [root@centos6dot7 mysql_slave]# ls -l /data/mysql/mysql-bin*
    -rw-rw---- 1 mysql mysql 106 Mar 26 21:50 /data/mysql/mysql-bin.000001
    -rw-rw---- 1 mysql mysql  19 Mar 26 21:50 /data/mysql/mysql-bin.index

    #赋予从权限,在主服务器新建一个用户赋予“REPLICATION SLAVE”的权限
    grant replication slave on *.* to 'slave_user'@'127.1.1.1' identified by 'admin';
    #禁止从数据库手动写入数据
    flush tables with read lock;
    flush privileges;
    show master status;

    #编辑从的配置文件
    vi /usr/local/mysql_slave/my.cnf
    server-id = 111

    #在从数据库上创建一个和主数据库同名的数据库，一定要保证数据库名称是一样的
    mysql -S /tmp/mysql_slave.sock -e "create database master"
    
    #把主数据库上master备份的数据恢复到从数据库上。
    mysql -S /tmp/mysql_slave.sock master < /root/mysql_dump/mysql_master.sql

    #先暂停同步
    stop slave ;

    ################ 下面这一步非常的关键！！！#####################
    ##
    change master to master_host='127.1.1.1', master_port=3306, master_user='slave_user', master_password='admin', master_log_file='mysql-bin.000001', master_log_pos=106;

    # 然后到主上执行
    mysql -uroot -S /tmp/mysql_slave.sock -e "unlock tables"

    #最后一步
    start slave;


    #查看同步状态，如果出现下面两行，则表示配置不成功。
    show slave status;
    Slave_IO_Running: No
    Slave_SQL_Running: No
    出现上面的原因可能是slave端的服务在修改完配置后没有重新启动服务
    /etc/init.d/mysqld_slave restart
    Slave_IO_Running: Yes
    Slave_SQL_Running: Yes

    #解锁
    unlock tables;

6. 要注意的问题
    a、重启主的mysql服务之前，最后先在从上stop slave一下，这样更加保险。 重启完了再开启start slave。 这样就没有问题了。
    b、建议: MySQL 主从机制比较脆弱,谨慎操作。如果重启 master,务必要先把 slave 停掉,
也就是说需要在 slave 上去执行 slave stop 命令,然后再去重启 master 的 mysql 服务,否则很有可能就会中断了。当然重启完后,还需要把 slave 给开启 slave start。 

7. 参考文档
     flush tables with read lock的作用          http://www.t086.com/article/4816
     Linux MySQL主从复制(Replication)配置       http://www.cnblogs.com/zgx/archive/2011/09/13/2174823.html
     主从配置                                   http://guodong432500.blog.163.com/blog/static/34535481201311242215373/
                                                http://www.jb51.net/article/33052.htm
    
